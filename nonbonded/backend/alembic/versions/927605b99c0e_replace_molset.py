"""Replace mol set with qc set.

Revision ID: 927605b99c0e
Revises: 62dc1b247022
Create Date: 2020-12-03 16:20:51.086081

"""
import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision = "927605b99c0e"
down_revision = "62dc1b247022"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###

    # Downgrading will result in data loss - proceed with caution!
    op.create_table(
        "qc_data_set_results",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_qc_data_set_results_id"), "qc_data_set_results", ["id"], unique=False
    )
    op.create_table(
        "qc_entries",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("record_id", sa.String(length=16), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("record_id"),
    )
    op.create_index(op.f("ix_qc_entries_id"), "qc_entries", ["id"], unique=False)
    op.create_table(
        "qc_data_set_statistics",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("parent_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["id"],
            ["statistics.id"],
        ),
        sa.ForeignKeyConstraint(
            ["parent_id"],
            ["qc_data_set_results.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "qc_data_sets",
        sa.Column("id", sa.String(length=32), nullable=False),
        sa.ForeignKeyConstraint(
            ["id"],
            ["base_sets.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "qc_data_set_entries",
        sa.Column("qc_data_set_id", sa.String(length=32), nullable=True),
        sa.Column("qc_entry_id", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["qc_data_set_id"],
            ["qc_data_sets.id"],
        ),
        sa.ForeignKeyConstraint(
            ["qc_entry_id"],
            ["qc_entries.id"],
        ),
    )
    op.drop_table("molecule_set_statistics")
    op.drop_index("ix_molecule_set_results_id", table_name="molecule_set_results")
    op.drop_table("molecule_set_results")
    op.drop_index("ix_molecules_id", table_name="molecules")
    op.drop_table("molecules")
    op.drop_table("molecule_sets")
    op.add_column(
        "recharge_target_results",
        sa.Column("qc_data_set_result_id", sa.Integer(), nullable=True),
    )
    op.drop_constraint(
        "recharge_target_results_molecule_set_result_id_fkey",
        "recharge_target_results",
        type_="foreignkey",
    )
    op.create_foreign_key(
        None,
        "recharge_target_results",
        "qc_data_set_results",
        ["qc_data_set_result_id"],
        ["id"],
    )
    op.drop_column("recharge_target_results", "molecule_set_result_id")
    op.add_column(
        "recharge_training_sets",
        sa.Column("qc_data_set_id", sa.String(), nullable=False),
    )
    op.drop_constraint(
        "recharge_training_sets_molecule_set_id_fkey",
        "recharge_training_sets",
        type_="foreignkey",
    )
    op.create_foreign_key(
        None, "recharge_training_sets", "qc_data_sets", ["qc_data_set_id"], ["id"]
    )
    op.drop_column("recharge_training_sets", "molecule_set_id")
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###

    # Downgrading will result in data loss - proceed with caution!
    op.add_column(
        "recharge_training_sets",
        sa.Column("molecule_set_id", sa.VARCHAR(), autoincrement=False, nullable=False),
    )
    op.drop_constraint(None, "recharge_training_sets", type_="foreignkey")
    op.create_foreign_key(
        "recharge_training_sets_molecule_set_id_fkey",
        "recharge_training_sets",
        "molecule_sets",
        ["molecule_set_id"],
        ["id"],
    )
    op.drop_column("recharge_training_sets", "qc_data_set_id")
    op.add_column(
        "recharge_target_results",
        sa.Column(
            "molecule_set_result_id", sa.INTEGER(), autoincrement=False, nullable=True
        ),
    )
    op.drop_constraint(None, "recharge_target_results", type_="foreignkey")
    op.create_foreign_key(
        "recharge_target_results_molecule_set_result_id_fkey",
        "recharge_target_results",
        "molecule_set_results",
        ["molecule_set_result_id"],
        ["id"],
    )
    op.drop_column("recharge_target_results", "qc_data_set_result_id")
    op.create_table(
        "molecule_sets",
        sa.Column("id", sa.VARCHAR(length=32), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(["id"], ["base_sets.id"], name="molecule_sets_id_fkey"),
        sa.PrimaryKeyConstraint("id", name="molecule_sets_pkey"),
        postgresql_ignore_search_path=False,
    )
    op.create_table(
        "molecules",
        sa.Column("smiles", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("parent_id", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(
            ["parent_id"], ["molecule_sets.id"], name="molecules_parent_id_fkey"
        ),
        sa.PrimaryKeyConstraint("id", name="molecules_pkey"),
    )
    op.create_index("ix_molecules_id", "molecules", ["id"], unique=False)
    op.create_table(
        "molecule_set_results",
        sa.Column(
            "id",
            sa.INTEGER(),
            server_default=sa.text("nextval('molecule_set_results_id_seq'::regclass)"),
            autoincrement=True,
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id", name="molecule_set_results_pkey"),
        postgresql_ignore_search_path=False,
    )
    op.create_index(
        "ix_molecule_set_results_id", "molecule_set_results", ["id"], unique=False
    )
    op.create_table(
        "molecule_set_statistics",
        sa.Column("id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("parent_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(
            ["id"], ["statistics.id"], name="molecule_set_statistics_id_fkey"
        ),
        sa.ForeignKeyConstraint(
            ["parent_id"],
            ["molecule_set_results.id"],
            name="molecule_set_statistics_parent_id_fkey",
        ),
        sa.PrimaryKeyConstraint("id", name="molecule_set_statistics_pkey"),
    )
    op.drop_table("qc_data_set_entries")
    op.drop_table("qc_data_sets")
    op.drop_table("qc_data_set_statistics")
    op.drop_index(op.f("ix_qc_entries_id"), table_name="qc_entries")
    op.drop_table("qc_entries")
    op.drop_index(op.f("ix_qc_data_set_results_id"), table_name="qc_data_set_results")
    op.drop_table("qc_data_set_results")
    # ### end Alembic commands ###
